name: CI/CD Pipeline - Vai na Lista

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: 'vai-na-lista-f9551'

jobs:
  # ==========================================
  # JOB 1: CODE QUALITY & TESTS
  # ==========================================
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Code formatting check
        run: npm run format:check

      - name: Lint check
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov (Optional)
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./coverage/vai-na-lista/lcov.info
          fail_ci_if_error: false

  # ==========================================
  # JOB 2: BUILD APPLICATION
  # ==========================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Create environment file
        run: |
          cat > src/environments/environment.ts << 'EOF'
          export const environment = {
            production: true,
            firebase: ${{ secrets.FIREBASE_CONFIG }}
          };
          EOF

      - name: Build for production
        run: npm run build:prod

      - name: List build output
        run: ls -la dist/vai-na-lista/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/vai-na-lista/
          retention-days: 1

  # ==========================================
  # JOB 3: DEPLOY TO PREVIEW (Pull Requests)
  # ==========================================
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/vai-na-lista/

      - name: Deploy to Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: 'pr-${{ github.event.number }}'
          expires: 7d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # ==========================================
  # JOB 4: DEPLOY TO PRODUCTION (Main Branch)
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/vai-na-lista/

      - name: Deploy to Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deployment Success Notification
        run: |
          echo "🎉 Vai na Lista deployed successfully!"
          echo "🌐 Production URL: https://vai-na-lista-f9551.web.app"
          echo "⏰ Build completed at: $(date)"
          echo "📦 Build size: $(du -sh dist/vai-na-lista/ | cut -f1)"

      - name: Comment PR with deploy info
        if: github.event_name == 'push'
        run: |
          echo "✅ **Deploy realizado com sucesso!**" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL de Produção:** https://vai-na-lista-f9551.web.app" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Tamanho do Build:** $(du -sh dist/vai-na-lista/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **Horário:** $(date)" >> $GITHUB_STEP_SUMMARY

import { Injectable, signal, computed, inject } from '@angular/core';
import { Router } from '@angular/router';
import {
  Auth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  updateProfile,
  GoogleAuthProvider,
  onAuthStateChanged,
  User,
  AuthError,
  signInWithRedirect,
  getRedirectResult,
  signInWithPopup,
} from '@angular/fire/auth';
import { Firestore, doc, setDoc, getDoc, Timestamp, serverTimestamp } from '@angular/fire/firestore';
import { StorageService } from './storage.service';
import { LoggingService } from './logging.service';
import { ToastService } from './toast.service';
import { UsuarioBasico } from '../../shared/models/usuario.model';
import { Observable } from 'rxjs';

export interface Usuario {
  uid: string;
  email: string;
  nome: string;
  photoURL?: string;
  providerId?: string;
}

export interface LoginData {
  email: string;
  senha: string;
}

export interface CadastroData {
  nome: string;
  email: string;
  senha: string;
}

/**
 * Servi√ßo de autentica√ß√£o com Firebase
 * ESTENDIDO para criar automaticamente documentos na cole√ß√£o 'usuarios'
 * Sincroniza dados entre Firebase Auth e Firestore
 * Garante que todos usu√°rios podem ser encontrados via busca por email
 */
@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private readonly STORAGE_KEY = 'vai-na-lista-usuario';
  private readonly COLLECTION_USUARIOS = 'usuarios';
  private googleProvider: GoogleAuthProvider;

  // Inje√ß√£o de depend√™ncias do Angular Fire
  private auth = inject(Auth);
  private firestore = inject(Firestore);

  // Signal para gerenciar o estado do usu√°rio autenticado
  private usuarioLogado = signal<Usuario | null>(null);
  private carregandoAuth = signal(true);

  // Computed signals para melhor performance (cached e reativo)
  readonly usuario = computed(() => this.usuarioLogado());
  readonly isAutenticado = computed(() => this.usuarioLogado() !== null);
  readonly isCarregando = computed(() => this.carregandoAuth());

  /**
   * Observable que emite o usu√°rio atual
   * Usa o signal interno para evitar duplo listener
   */
  readonly usuario$ = new Observable<Usuario | null>(subscriber => {
    let lastValue = this.usuarioLogado();

    // Emite valor inicial
    subscriber.next(lastValue);

    // Cria um interval muito leve para verificar mudan√ßas no signal
    // Isso √© mais eficiente que duplicar onAuthStateChanged
    const intervalId = setInterval(() => {
      const currentValue = this.usuarioLogado();
      if (currentValue !== lastValue) {
        lastValue = currentValue;
        subscriber.next(currentValue);
      }
    }, 50); // Check a cada 50ms

    // Cleanup
    return () => {
      clearInterval(intervalId);
    };
  });

  constructor(
    private router: Router,
    private storageService: StorageService,
    private loggingService: LoggingService,
    private toastService: ToastService
  ) {
    // Configura o provider do Google com par√¢metros otimizados
    this.googleProvider = new GoogleAuthProvider();
    this.googleProvider.addScope('email');
    this.googleProvider.addScope('profile');
    // Configura√ß√£o para reduzir warnings de COOP
    this.googleProvider.setCustomParameters({
      prompt: 'select_account',
    });

    this.inicializarAuth();
    this.verificarRedirectGoogle();
  }

  /**
   * Inicializa o listener de autentica√ß√£o do Firebase
   * ESTENDIDO para criar/atualizar documento do usu√°rio no Firestore
   */
  private inicializarAuth(): void {
    console.log('üîß Inicializando listener de autentica√ß√£o...');

    onAuthStateChanged(this.auth, async firebaseUser => {
      console.log('üîî onAuthStateChanged disparado:', {
        user: firebaseUser
          ? {
              uid: firebaseUser.uid,
              email: firebaseUser.email,
              displayName: firebaseUser.displayName,
            }
          : null,
        currentRoute: this.router.url,
      });

      this.carregandoAuth.set(false);

      if (firebaseUser) {
        console.log('‚úÖ Usu√°rio autenticado encontrado, processando...');

        // NOVO: Criar/atualizar documento no Firestore
        await this.criarOuAtualizarUsuarioFirestore(firebaseUser);

        const usuario = this.mapearUsuarioFirebase(firebaseUser);
        this.usuarioLogado.set(usuario);
        this.storageService.setItem(this.STORAGE_KEY, usuario);

        console.log('üíæ Usu√°rio salvo no state e storage:', usuario);
      } else {
        console.log('‚ùå Nenhum usu√°rio autenticado');
        this.usuarioLogado.set(null);
        this.storageService.removeItem(this.STORAGE_KEY);
      }
    });
  }

  /**
   * Verifica se h√° resultado de redirect do Google pendente
   */
  private async verificarRedirectGoogle(): Promise<void> {
    try {
      console.log('üîç Verificando resultado de redirect do Google...');
      const result = await getRedirectResult(this.auth);

      if (result) {
        // Usu√°rio retornou do redirect do Google
        console.log('‚úÖ Redirect do Google detectado:', {
          uid: result.user.uid,
          email: result.user.email,
          displayName: result.user.displayName,
        });

        this.loggingService.info('Google redirect result detected', {
          uid: result.user.uid,
          email: result.user.email,
        });

        // O onAuthStateChanged j√° vai processar este usu√°rio
        // S√≥ precisamos navegar para a lista se estivermos na p√°gina de login
        if (this.router.url === '/login' || this.router.url === '/cadastro') {
          console.log('üîÑ Redirecionando para /lista...');
          await this.router.navigate(['/lista']);
        }
      } else {
        console.log('‚ÑπÔ∏è Nenhum resultado de redirect do Google encontrado');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar redirect do Google:', error);
      this.loggingService.error('Erro ao verificar redirect do Google', {
        error: (error as Error).message,
        stack: (error as Error).stack,
      });

      // Se h√° erro, pode ser que o usu√°rio cancelou o login
      this.toastService.warning('Login com Google cancelado ou falhou');
    }
  }

  /**
   * NOVO: Cria ou atualiza documento do usu√°rio no Firestore
   * Garante que usu√°rio pode ser encontrado via busca por email
   */
  private async criarOuAtualizarUsuarioFirestore(firebaseUser: User): Promise<void> {
    try {
      const userDocRef = doc(this.firestore, this.COLLECTION_USUARIOS, firebaseUser.uid);

      // Verifica se documento j√° existe
      const userDocSnap = await getDoc(userDocRef);

      // Prepara dados do usu√°rio
      const dadosUsuario: Omit<UsuarioBasico, 'uid'> & {
        provider: string;
        atualizadoEm: any;
        criadoEm?: any;
      } = {
        email: firebaseUser.email || '',
        nome: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || 'Usu√°rio',
        photoURL: firebaseUser.photoURL || undefined,
        provider: firebaseUser.providerData[0]?.providerId || 'password',
        atualizadoEm: serverTimestamp(),
      };

      if (userDocSnap.exists()) {
        // ATUALIZAR: Documento existe, atualizar dados
        await setDoc(userDocRef, dadosUsuario, { merge: true });

        this.loggingService.info('Documento do usu√°rio atualizado no Firestore', {
          uid: firebaseUser.uid,
          email: firebaseUser.email,
          existiaAntes: true,
        });
      } else {
        // CRIAR: Documento n√£o existe, criar novo
        await setDoc(userDocRef, {
          ...dadosUsuario,
          criadoEm: serverTimestamp(),
        });

        this.loggingService.info('Novo documento criado no Firestore', {
          uid: firebaseUser.uid,
          email: firebaseUser.email,
          nome: dadosUsuario.nome,
          provider: dadosUsuario.provider,
        });

        // Toast de boas-vindas para novos usu√°rios
        this.toastService.success(`Perfil criado com sucesso! Bem-vindo, ${dadosUsuario.nome}!`, 'Conta Configurada');
      }
    } catch (error: unknown) {
      // IMPORTANTE: Erro na cria√ß√£o do documento N√ÉO deve impedir o login
      this.loggingService.error('Erro ao criar/atualizar documento do usu√°rio no Firestore', {
        uid: firebaseUser.uid,
        email: firebaseUser.email,
        error: (error as Error).message,
      });

      // N√£o mostra toast de erro para n√£o assustar o usu√°rio
      // O login continua funcionando mesmo se o Firestore falhar
      console.warn('‚ö†Ô∏è Firestore sync failed, but login will continue:', error);
    }
  }

  /**
   * Converte User do Firebase para interface Usuario
   */
  private mapearUsuarioFirebase(firebaseUser: User): Usuario {
    return {
      uid: firebaseUser.uid,
      email: firebaseUser.email || '',
      nome: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || 'Usu√°rio',
      photoURL: firebaseUser.photoURL || undefined,
      providerId: firebaseUser.providerData[0]?.providerId || 'password',
    };
  }

  /**
   * Login com email e senha
   * ESTENDIDO para sincronizar dados com Firestore
   */
  async loginEmailSenha(loginData: LoginData): Promise<boolean> {
    const startTime = Date.now();

    try {
      this.loggingService.info('Email login attempt started', {
        email: loginData.email,
      });

      const userCredential = await signInWithEmailAndPassword(this.auth, loginData.email, loginData.senha);

      // NOVO: Dados j√° s√£o sincronizados automaticamente via onAuthStateChanged

      const duration = Date.now() - startTime;

      this.loggingService.info('Email login successful', {
        uid: userCredential.user.uid,
        email: userCredential.user.email,
        duration: `${duration}ms`,
        firestoreSync: true,
      });

      this.toastService.success('Login realizado com sucesso!', 'Bem-vindo');
      await this.router.navigate(['/lista']);
      return true;
    } catch (error: unknown) {
      const duration = Date.now() - startTime;

      this.loggingService.error('Email login failed', {
        email: loginData.email,
        error: (error as AuthError).code,
        message: (error as AuthError).message,
        duration: `${duration}ms`,
      });

      this.tratarErroLogin(error as AuthError);
      return false;
    }
  }

  /**
   * Login com Google - tenta popup primeiro, depois redirect se falhar
   * ESTENDIDO para sincronizar dados com Firestore
   */
  async loginGoogle(): Promise<boolean> {
    // Verifica se usu√°rio j√° est√° autenticado
    if (this.isAutenticado()) {
      console.log('‚ÑπÔ∏è Usu√°rio j√° est√° autenticado, navegando para lista...');
      this.toastService.info('Voc√™ j√° est√° logado!');
      await this.router.navigate(['/lista']);
      return true;
    }

    try {
      console.log('üöÄ Iniciando login com Google...');

      // Tenta popup primeiro (funciona melhor em desenvolvimento)
      return await this.loginGooglePopup();
    } catch (error: unknown) {
      console.log('‚ö†Ô∏è Popup falhou, tentando redirect...', error);

      // Se popup falhar, tenta redirect
      return await this.loginGoogleRedirect();
    }
  }

  /**
   * Login com Google usando redirect (mais robusto para produ√ß√£o)
   * ESTENDIDO para sincronizar dados com Firestore
   */
  async loginGoogleRedirect(): Promise<boolean> {
    try {
      console.log('üöÄ Iniciando login com Google via redirect...');
      this.loggingService.info('Google login redirect initiated');

      // Inicia o processo de redirect para Google
      console.log('üîÑ Chamando signInWithRedirect...');
      await signInWithRedirect(this.auth, this.googleProvider);

      console.log('‚úÖ signInWithRedirect chamado com sucesso - usu√°rio ser√° redirecionado');

      // O usu√°rio ser√° redirecionado imediatamente
      // O resultado ser√° processado quando voltar via verificarRedirectGoogle()
      return true;
    } catch (error: unknown) {
      console.error('‚ùå Erro no signInWithRedirect:', error);
      this.loggingService.error('Google login redirect failed', {
        error: (error as AuthError).code,
        message: (error as AuthError).message,
      });

      this.tratarErroLogin(error as AuthError);
      return false;
    }
  }

  /**
   * Login com Google usando popup (fallback)
   * ESTENDIDO para sincronizar dados com Firestore
   */
  async loginGooglePopup(): Promise<boolean> {
    try {
      console.log('üöÄ Iniciando login com Google via popup...');
      this.loggingService.info('Google login popup initiated');

      // Inicia o processo de login com Google usando popup
      console.log('üîÑ Chamando signInWithPopup...');
      const result = await signInWithPopup(this.auth, this.googleProvider);

      console.log('‚úÖ signInWithPopup bem-sucedido:', {
        uid: result.user.uid,
        email: result.user.email,
      });

      // IMPORTANTE: Aguarda o onAuthStateChanged processar o usu√°rio
      const autenticado = await this.aguardarAutenticacao(3000); // 3 segundos

      if (!autenticado) {
        console.warn('‚ö†Ô∏è Timeout aguardando processamento - for√ßando atualiza√ß√£o do estado');
        // For√ßa atualiza√ß√£o do estado se necess√°rio
        const usuario = this.mapearUsuarioFirebase(result.user);
        this.usuarioLogado.set(usuario);
        this.storageService.setItem(this.STORAGE_KEY, usuario);
      }

      // Mostra sucesso e navega
      this.toastService.success('Login realizado com sucesso!', 'Bem-vindo');

      // Navega para a lista
      await this.router.navigate(['/lista']);

      return true;
    } catch (error: unknown) {
      console.error('‚ùå Erro no signInWithPopup:', error);
      this.loggingService.error('Google login popup failed', {
        error: (error as AuthError).code,
        message: (error as AuthError).message,
      });

      this.tratarErroLogin(error as AuthError);
      return false;
    }
  }

  /**
   * Cadastro com email e senha
   * ESTENDIDO para criar documento no Firestore automaticamente
   */
  async cadastrar(cadastroData: CadastroData): Promise<boolean> {
    const startTime = Date.now();

    try {
      this.loggingService.info('User registration attempt started', {
        email: cadastroData.email,
        nome: cadastroData.nome,
      });

      // Cria usu√°rio no Firebase Auth
      const userCredential = await createUserWithEmailAndPassword(this.auth, cadastroData.email, cadastroData.senha);

      // Atualiza perfil com nome
      await updateProfile(userCredential.user, {
        displayName: cadastroData.nome,
      });

      // NOVO: Documento no Firestore √© criado automaticamente via onAuthStateChanged
      // que detecta a mudan√ßa e chama criarOuAtualizarUsuarioFirestore()

      const duration = Date.now() - startTime;

      this.loggingService.info('User registration successful', {
        uid: userCredential.user.uid,
        email: userCredential.user.email,
        nome: cadastroData.nome,
        duration: `${duration}ms`,
        firestoreSync: true,
      });

      this.toastService.success(`Conta criada com sucesso! Bem-vindo, ${cadastroData.nome}!`, 'Cadastro Realizado');

      await this.router.navigate(['/lista']);
      return true;
    } catch (error: unknown) {
      const duration = Date.now() - startTime;

      this.loggingService.error('User registration failed', {
        email: cadastroData.email,
        error: (error as AuthError).code,
        message: (error as AuthError).message,
        duration: `${duration}ms`,
      });

      this.tratarErroCadastro(error as AuthError);
      return false;
    }
  }

  /**
   * Logout
   */
  async logout(): Promise<void> {
    try {
      const currentUser = this.usuarioLogado();

      this.loggingService.info('Logout initiated', {
        uid: currentUser?.uid,
        email: currentUser?.email,
      });

      await signOut(this.auth);

      this.toastService.success('Logout realizado com sucesso!');
      this.loggingService.info('Logout completed successfully');

      await this.router.navigate(['/login']);
    } catch (error: unknown) {
      this.loggingService.error('Logout error', {
        error: (error as AuthError).code,
        message: (error as AuthError).message,
      });

      this.toastService.error('Erro ao fazer logout. Tente novamente.');
    }
  }

  /**
   * NOVO: For√ßa sincroniza√ß√£o do usu√°rio atual com Firestore
   * √ötil para casos onde o documento foi perdido ou corrompido
   */
  async forcarSincronizacaoFirestore(): Promise<boolean> {
    const currentUser = this.auth.currentUser;

    if (!currentUser) {
      this.loggingService.warn('Tentativa de sincroniza√ß√£o sem usu√°rio logado');
      return false;
    }

    try {
      await this.criarOuAtualizarUsuarioFirestore(currentUser);
      this.toastService.success('Dados sincronizados com sucesso!', 'Sincroniza√ß√£o');
      return true;
    } catch (error: unknown) {
      this.loggingService.error('Erro na sincroniza√ß√£o for√ßada', {
        uid: currentUser.uid,
        error: (error as Error).message,
      });
      this.toastService.error('Erro na sincroniza√ß√£o dos dados', 'Erro');
      return false;
    }
  }

  /**
   * NOVO: Verifica se documento do usu√°rio existe no Firestore
   * √ötil para debugging e valida√ß√£o
   */
  async verificarDocumentoFirestore(): Promise<{ existe: boolean; dados?: any }> {
    const currentUser = this.auth.currentUser;

    if (!currentUser) {
      return { existe: false };
    }

    try {
      const userDocRef = doc(this.firestore, this.COLLECTION_USUARIOS, currentUser.uid);
      const userDocSnap = await getDoc(userDocRef);

      if (userDocSnap.exists()) {
        return {
          existe: true,
          dados: userDocSnap.data(),
        };
      } else {
        return { existe: false };
      }
    } catch (error: unknown) {
      this.loggingService.error('Erro ao verificar documento no Firestore', {
        uid: currentUser.uid,
        error: (error as Error).message,
      });
      return { existe: false };
    }
  }

  /**
   * Trata erros espec√≠ficos de login
   */
  private tratarErroLogin(error: AuthError): void {
    const errorMessages: Record<string, string> = {
      'auth/user-not-found': 'Usu√°rio n√£o encontrado. Verifique o email ou cadastre-se.',
      'auth/wrong-password': 'Senha incorreta. Tente novamente.',
      'auth/invalid-email': 'Email inv√°lido. Verifique o formato.',
      'auth/user-disabled': 'Esta conta foi desabilitada.',
      'auth/too-many-requests': 'Muitas tentativas. Tente novamente mais tarde.',
      'auth/popup-closed-by-user': 'Login cancelado pelo usu√°rio.',
      'auth/popup-blocked': 'Pop-up bloqueado. Permita pop-ups para este site.',
      'auth/network-request-failed': 'Erro de conex√£o. Verifique sua internet.',
      'auth/invalid-credential': 'Credenciais inv√°lidas. Verifique email e senha.',
      'auth/cancelled-popup-request': 'Login cancelado.',
      'auth/unauthorized-domain': 'Dom√≠nio n√£o autorizado para login com Google.',
    };

    // N√£o mostra erro para warnings de COOP (s√£o apenas logs internos)
    if (error.message && error.message.includes('Cross-Origin-Opener-Policy')) {
      console.log('‚ÑπÔ∏è Warning de COOP ignorado (n√£o afeta funcionamento)');
      return;
    }

    const message = errorMessages[error.code] || 'Erro inesperado no login. Tente novamente.';

    // S√≥ mostra toast se n√£o for erro de popup cancelado
    if (error.code !== 'auth/popup-closed-by-user' && error.code !== 'auth/cancelled-popup-request') {
      this.toastService.error(message, 'Erro de Login');
    }
  }

  /**
   * Trata erros espec√≠ficos de cadastro
   */
  private tratarErroCadastro(error: AuthError): void {
    const errorMessages: Record<string, string> = {
      'auth/email-already-in-use': 'Este email j√° est√° em uso. Tente fazer login.',
      'auth/weak-password': 'A senha deve ter pelo menos 6 caracteres.',
      'auth/invalid-email': 'Email inv√°lido. Verifique o formato.',
      'auth/operation-not-allowed': 'Cadastro n√£o permitido. Contate o suporte.',
      'auth/network-request-failed': 'Erro de conex√£o. Verifique sua internet.',
    };

    const message = errorMessages[error.code] || 'Erro inesperado no cadastro. Tente novamente.';
    this.toastService.error(message, 'Erro de Cadastro');
  }

  /**
   * Verifica se a sess√£o atual √© v√°lida
   */
  verificarSessao(): boolean {
    const usuario = this.usuarioLogado();
    const isValid = usuario !== null;

    this.loggingService.debug('Session verification', {
      isValid: isValid,
      uid: usuario?.uid,
      email: usuario?.email,
    });

    return isValid;
  }

  /**
   * Aguarda at√© que a autentica√ß√£o seja processada completamente
   * √ötil para aguardar ap√≥s login via popup/redirect
   */
  async aguardarAutenticacao(timeoutMs: number = 5000): Promise<boolean> {
    console.log('‚è≥ Aguardando processamento de autentica√ß√£o...');

    const startTime = Date.now();

    while (Date.now() - startTime < timeoutMs) {
      // Se n√£o est√° carregando e h√° usu√°rio autenticado
      if (!this.isCarregando() && this.isAutenticado()) {
        console.log('‚úÖ Autentica√ß√£o processada com sucesso');
        return true;
      }

      // Aguarda 50ms antes de verificar novamente
      await new Promise(resolve => setTimeout(resolve, 50));
    }

    console.warn('‚ö†Ô∏è Timeout aguardando processamento de autentica√ß√£o');
    return false;
  }

  /**
   * Obt√©m informa√ß√µes do usu√°rio atual para logging
   */
  obterContextoUsuario(): { uid?: string; email?: string; nome?: string } {
    const usuario = this.usuarioLogado();
    return {
      uid: usuario?.uid,
      email: usuario?.email,
      nome: usuario?.nome,
    };
  }
}

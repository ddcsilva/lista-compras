import { inject } from '@angular/core';
import { Router, CanActivateFn } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { LoggingService } from '../services/logging.service';

/**
 * Guard que protege rotas autenticadas
 * Aguarda carregamento do Firebase e redireciona para login se necess√°rio
 */
export const authGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  console.log('üõ°Ô∏è authGuard executado:', {
    isCarregando: authService.isCarregando(),
    isAutenticado: authService.isAutenticado(),
    usuario: authService.usuario(),
    currentRoute: router.url,
  });

  // Se ainda est√° carregando, aguarda
  if (authService.isCarregando()) {
    console.log('‚è≥ Auth ainda carregando, aguardando...');

    return new Promise(resolve => {
      setTimeout(() => {
        console.log('üîÑ Recheck ap√≥s delay de carregamento:', {
          isCarregando: authService.isCarregando(),
          isAutenticado: authService.isAutenticado(),
        });

        if (authService.isAutenticado()) {
          console.log('‚úÖ Usu√°rio autenticado ap√≥s delay de carregamento');
          resolve(true);
        } else {
          console.log('‚ùå Usu√°rio n√£o autenticado ap√≥s carregamento, redirecionando para login');
          router.navigate(['/login']);
          resolve(false);
        }
      }, 100);
    });
  }

  // Se j√° autenticado, permite
  if (authService.isAutenticado()) {
    console.log('‚úÖ Usu√°rio autenticado, permitindo acesso');
    return true;
  }

  // Se n√£o autenticado, aguarda um pouco mais para casos de login em andamento
  console.log('‚è≥ Usu√°rio n√£o autenticado, aguardando poss√≠vel login em andamento...');

  return new Promise(resolve => {
    let tentativas = 0;
    const maxTentativas = 30; // 3 segundos (30 x 100ms)

    const checkAuth = () => {
      tentativas++;

      if (authService.isAutenticado()) {
        console.log('‚úÖ Usu√°rio autenticado durante aguardo, permitindo acesso');
        resolve(true);
        return;
      }

      if (tentativas >= maxTentativas) {
        console.log('‚ùå Timeout aguardando autentica√ß√£o, redirecionando para login');
        router.navigate(['/login']);
        resolve(false);
        return;
      }

      setTimeout(checkAuth, 100);
    };

    checkAuth();
  });
};

/**
 * Guard para rotas p√∫blicas (login, cadastro)
 * Redireciona usu√°rios autenticados para a lista
 */
export const publicGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  const usuario = authService.usuario();

  if (usuario) {
    // Usu√°rio j√° est√° logado, redireciona para lista
    router.navigate(['/lista']);
    return false;
  }

  return true;
};
